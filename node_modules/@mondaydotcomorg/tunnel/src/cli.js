#!/usr/bin/env node
"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
const tslib_1 = require("tslib");
const dotenv_1 = tslib_1.__importDefault(require("dotenv"));
const yargs_1 = tslib_1.__importDefault(require("yargs/yargs"));
const pino_1 = tslib_1.__importDefault(require("pino"));
const pino_pretty_1 = tslib_1.__importDefault(require("pino-pretty"));
const package_json_1 = require("../package.json");
const createTunnel_1 = tslib_1.__importDefault(require("./lib/createTunnel"));
const constants_1 = require("./constants");
const y = (0, yargs_1.default)(process.argv.slice(2))
    .usage('Usage: mtunnel --port [num] <options>')
    .option('port', {
    alias: 'p',
    describe: 'Internal HTTP server port',
    demandOption: true,
    type: 'number',
})
    .option('host', {
    alias: 'h',
    describe: 'Upstream server providing forwarding',
    default: constants_1.TUNNEL_DEFAULT_HOST,
})
    .option('subdomain', {
    alias: 's',
    describe: 'Request this subdomain',
    type: 'string',
})
    .option('local-host', {
    alias: 'l',
    describe: 'Tunnel traffic to this host instead of localhost, override Host header to this host',
    type: 'string',
})
    .options('open', {
    alias: 'o',
    describe: 'Opens the tunnel URL in your browser',
    type: 'boolean',
})
    .option('debug', {
    alias: 'd',
    describe: 'Print more verbose logs',
    type: 'boolean',
})
    .option('env-file', {
    alias: 'e',
    describe: 'Loads parameters from .env file',
    default: '.env',
    type: 'string',
    conflicts: 'no-env-file',
})
    .option('no-env-file', {
    describe: 'Skips loading parameters from .env file',
    type: 'boolean',
    conflicts: 'env-file',
})
    .option('print-requests', {
    describe: 'Print basic request info',
    type: 'boolean',
})
    .env('TUNNEL')
    .help('help', 'Show th-is help and exit')
    .version(package_json_1.version);
let argv = y.parse();
if (!argv['no-env-file']) {
    dotenv_1.default.config({ path: argv['env-file'] });
    argv = y.parse();
}
const logger = (0, pino_1.default)({
    level: argv.debug ? 'debug' : 'info',
}, (0, pino_pretty_1.default)({
    ignore: 'pid,hostname',
    singleLine: true,
    translateTime: 'SYS:HH:MM:ss.l',
}));
(() => tslib_1.__awaiter(void 0, void 0, void 0, function* () {
    var _a;
    const tunnel = yield (0, createTunnel_1.default)({
        port: argv.port,
        host: argv.host,
        subdomain: argv.subdomain,
        localHost: argv['local-host'],
        logger,
    }).catch((err) => {
        logger.error({ err });
        process.exit(1);
    });
    tunnel.$error.subscribe((err) => {
        logger.error({ err });
    });
    logger.info('your url is: %s', (_a = tunnel.info) === null || _a === void 0 ? void 0 : _a.url);
    if (argv['print-requests']) {
        tunnel.$request.subscribe((info) => {
            logger.info(`${info.method} - ${info.path}`);
        });
    }
}))();
//# sourceMappingURL=cli.js.map